{"version":3,"sources":["index.js","SupabaseClient.js","lib/constants.js","lib/version.js","lib/fetch.js","lib/helpers.js","lib/SupabaseAuthClient.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA,ACHA;AFOA,ADGA,AENA,ACHA;AFOA,ADGA,AENA,ACHA;AFOA,ADGA,AENA,AENA,ADGA;AFOA,ADGA,AENA,AENA,ADGA;AFOA,ADGA,AENA,AENA;AHUA,ADGA,AENA,AENA,ACHA;AJaA,ADGA,AENA,AENA,ACHA;AJaA,ADGA,AENA,AENA,ACHA;AJaA,ADGA,AMlBA,AJYA,AENA,ACHA;AJaA,ADGA,AMlBA,AJYA,AENA,ACHA;AJaA,ADGA,AMlBA,AJYA,AENA,ACHA;AJaA,ADGA,AMlBA,AJYA,AENA,ACHA;AJaA,ADGA,AMlBA,AJYA,AENA,ACHA;AJaA,ADGA,AMlBA,AJYA,AENA,ACHA;AJaA,ADGA,AMlBA,AJYA,AENA,ACHA;AJaA,ADGA,AMlBA,AJYA,AENA,ACHA;AJaA,ADGA,AMlBA,AJYA,AENA,ACHA;AJaA,ADGA,AMlBA,AJYA,AENA,ACHA;AJaA,ADGA,AMlBA,AJYA,AENA,ACHA;AJaA,ADGA,AENA,AENA,ACHA;AJaA,ADGA,AENA,AENA,ACHA;AJaA,ADGA,AENA,AENA,ACHA;AJaA,ADGA,AENA,AENA,ACHA;AJaA,ADGA,AENA,AENA,ACHA;AJaA,ADGA,AENA,AENA,ACHA;AJaA,ADGA,AENA,AENA,ACHA;AJaA,ADGA,AENA,AENA,ACHA;AJaA,ADGA,AENA,AENA,ACHA;AJaA,ADGA,AENA,AENA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,ADGA,AIZA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJaA,AGTA,ACHA;AJafile":"index.js","sourcesContent":["\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createClient = exports.SupabaseClient = exports.FunctionRegion = exports.FunctionsError = exports.FunctionsRelayError = exports.FunctionsFetchError = exports.FunctionsHttpError = exports.PostgrestError = void 0;\nconst SupabaseClient_1 = __importDefault(require(\"./SupabaseClient\"));\n__exportStar(require(\"@supabase/auth-js\"), exports);\nvar postgrest_js_1 = require(\"@supabase/postgrest-js\");\nObject.defineProperty(exports, \"PostgrestError\", { enumerable: true, get: function () { return postgrest_js_1.PostgrestError; } });\nvar functions_js_1 = require(\"@supabase/functions-js\");\nObject.defineProperty(exports, \"FunctionsHttpError\", { enumerable: true, get: function () { return functions_js_1.FunctionsHttpError; } });\nObject.defineProperty(exports, \"FunctionsFetchError\", { enumerable: true, get: function () { return functions_js_1.FunctionsFetchError; } });\nObject.defineProperty(exports, \"FunctionsRelayError\", { enumerable: true, get: function () { return functions_js_1.FunctionsRelayError; } });\nObject.defineProperty(exports, \"FunctionsError\", { enumerable: true, get: function () { return functions_js_1.FunctionsError; } });\nObject.defineProperty(exports, \"FunctionRegion\", { enumerable: true, get: function () { return functions_js_1.FunctionRegion; } });\n__exportStar(require(\"@supabase/realtime-js\"), exports);\nvar SupabaseClient_2 = require(\"./SupabaseClient\");\nObject.defineProperty(exports, \"SupabaseClient\", { enumerable: true, get: function () { return __importDefault(SupabaseClient_2).default; } });\n/**\n * Creates a new Supabase Client.\n */\nconst createClient = (supabaseUrl, supabaseKey, options) => {\n    return new SupabaseClient_1.default(supabaseUrl, supabaseKey, options);\n};\nexports.createClient = createClient;\n// Check for Node.js <= 18 deprecation\nfunction shouldShowDeprecationWarning() {\n    // Skip in browser environments\n    if (typeof window !== 'undefined') {\n        return false;\n    }\n    // Skip if process is not available (e.g., Edge Runtime)\n    if (typeof process === 'undefined') {\n        return false;\n    }\n    // Use dynamic property access to avoid Next.js Edge Runtime static analysis warnings\n    const processVersion = process['version'];\n    if (processVersion === undefined || processVersion === null) {\n        return false;\n    }\n    const versionMatch = processVersion.match(/^v(\\d+)\\./);\n    if (!versionMatch) {\n        return false;\n    }\n    const majorVersion = parseInt(versionMatch[1], 10);\n    return majorVersion <= 18;\n}\nif (shouldShowDeprecationWarning()) {\n    console.warn(`⚠️  Node.js 18 and below are deprecated and will no longer be supported in future versions of @supabase/supabase-js. ` +\n        `Please upgrade to Node.js 20 or later. ` +\n        `For more information, visit: https://github.com/orgs/supabase/discussions/37217`);\n}\n//# sourceMappingURL=index.js.map","\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst functions_js_1 = require(\"@supabase/functions-js\");\nconst postgrest_js_1 = require(\"@supabase/postgrest-js\");\nconst realtime_js_1 = require(\"@supabase/realtime-js\");\nconst storage_js_1 = require(\"@supabase/storage-js\");\nconst constants_1 = require(\"./lib/constants\");\nconst fetch_1 = require(\"./lib/fetch\");\nconst helpers_1 = require(\"./lib/helpers\");\nconst SupabaseAuthClient_1 = require(\"./lib/SupabaseAuthClient\");\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nclass SupabaseClient {\n    /**\n     * Create a new client for use in the browser.\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n     * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n     * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n     * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n     * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n     * @param options.realtime Options passed along to realtime-js constructor.\n     * @param options.storage Options passed along to the storage-js constructor.\n     * @param options.global.fetch A custom fetch implementation.\n     * @param options.global.headers Any additional headers to send with each network request.\n     */\n    constructor(supabaseUrl, supabaseKey, options) {\n        var _a, _b, _c;\n        this.supabaseUrl = supabaseUrl;\n        this.supabaseKey = supabaseKey;\n        const baseUrl = (0, helpers_1.validateSupabaseUrl)(supabaseUrl);\n        if (!supabaseKey)\n            throw new Error('supabaseKey is required.');\n        this.realtimeUrl = new URL('realtime/v1', baseUrl);\n        this.realtimeUrl.protocol = this.realtimeUrl.protocol.replace('http', 'ws');\n        this.authUrl = new URL('auth/v1', baseUrl);\n        this.storageUrl = new URL('storage/v1', baseUrl);\n        this.functionsUrl = new URL('functions/v1', baseUrl);\n        // default storage key uses the supabase project ref as a namespace\n        const defaultStorageKey = `sb-${baseUrl.hostname.split('.')[0]}-auth-token`;\n        const DEFAULTS = {\n            db: constants_1.DEFAULT_DB_OPTIONS,\n            realtime: constants_1.DEFAULT_REALTIME_OPTIONS,\n            auth: Object.assign(Object.assign({}, constants_1.DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),\n            global: constants_1.DEFAULT_GLOBAL_OPTIONS,\n        };\n        const settings = (0, helpers_1.applySettingDefaults)(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n        this.storageKey = (_a = settings.auth.storageKey) !== null && _a !== void 0 ? _a : '';\n        this.headers = (_b = settings.global.headers) !== null && _b !== void 0 ? _b : {};\n        if (!settings.accessToken) {\n            this.auth = this._initSupabaseAuthClient((_c = settings.auth) !== null && _c !== void 0 ? _c : {}, this.headers, settings.global.fetch);\n        }\n        else {\n            this.accessToken = settings.accessToken;\n            this.auth = new Proxy({}, {\n                get: (_, prop) => {\n                    throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(prop)} is not possible`);\n                },\n            });\n        }\n        this.fetch = (0, fetch_1.fetchWithAuth)(supabaseKey, this._getAccessToken.bind(this), settings.global.fetch);\n        this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers, accessToken: this._getAccessToken.bind(this) }, settings.realtime));\n        this.rest = new postgrest_js_1.PostgrestClient(new URL('rest/v1', baseUrl).href, {\n            headers: this.headers,\n            schema: settings.db.schema,\n            fetch: this.fetch,\n        });\n        this.storage = new storage_js_1.StorageClient(this.storageUrl.href, this.headers, this.fetch, options === null || options === void 0 ? void 0 : options.storage);\n        if (!settings.accessToken) {\n            this._listenForAuthEvents();\n        }\n    }\n    /**\n     * Supabase Functions allows you to deploy and invoke edge functions.\n     */\n    get functions() {\n        return new functions_js_1.FunctionsClient(this.functionsUrl.href, {\n            headers: this.headers,\n            customFetch: this.fetch,\n        });\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n        return this.rest.from(relation);\n    }\n    // NOTE: signatures must be kept in sync with PostgrestClient.schema\n    /**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */\n    schema(schema) {\n        return this.rest.schema(schema);\n    }\n    // NOTE: signatures must be kept in sync with PostgrestClient.rpc\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.get - When set to `true`, the function will be called with\n     * read-only access mode.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, options = {}) {\n        return this.rest.rpc(fn, args, options);\n    }\n    /**\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n     *\n     * @param {string} name - The name of the Realtime channel.\n     * @param {Object} opts - The options to pass to the Realtime channel.\n     *\n     */\n    channel(name, opts = { config: {} }) {\n        return this.realtime.channel(name, opts);\n    }\n    /**\n     * Returns all Realtime channels.\n     */\n    getChannels() {\n        return this.realtime.getChannels();\n    }\n    /**\n     * Unsubscribes and removes Realtime channel from Realtime client.\n     *\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\n     *\n     */\n    removeChannel(channel) {\n        return this.realtime.removeChannel(channel);\n    }\n    /**\n     * Unsubscribes and removes all Realtime channels from Realtime client.\n     */\n    removeAllChannels() {\n        return this.realtime.removeAllChannels();\n    }\n    _getAccessToken() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.accessToken) {\n                return yield this.accessToken();\n            }\n            const { data } = yield this.auth.getSession();\n            return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : this.supabaseKey;\n        });\n    }\n    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, userStorage, storageKey, flowType, lock, debug, }, headers, fetch) {\n        const authHeaders = {\n            Authorization: `Bearer ${this.supabaseKey}`,\n            apikey: `${this.supabaseKey}`,\n        };\n        return new SupabaseAuthClient_1.SupabaseAuthClient({\n            url: this.authUrl.href,\n            headers: Object.assign(Object.assign({}, authHeaders), headers),\n            storageKey: storageKey,\n            autoRefreshToken,\n            persistSession,\n            detectSessionInUrl,\n            storage,\n            userStorage,\n            flowType,\n            lock,\n            debug,\n            fetch,\n            // auth checks if there is a custom authorizaiton header using this flag\n            // so it knows whether to return an error when getUser is called with no session\n            hasCustomAuthorizationHeader: Object.keys(this.headers).some((key) => key.toLowerCase() === 'authorization'),\n        });\n    }\n    _initRealtimeClient(options) {\n        return new realtime_js_1.RealtimeClient(this.realtimeUrl.href, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));\n    }\n    _listenForAuthEvents() {\n        let data = this.auth.onAuthStateChange((event, session) => {\n            this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\n        });\n        return data;\n    }\n    _handleTokenChanged(event, source, token) {\n        if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n            this.changedAccessToken !== token) {\n            this.changedAccessToken = token;\n        }\n        else if (event === 'SIGNED_OUT') {\n            this.realtime.setAuth();\n            if (source == 'STORAGE')\n                this.auth.signOut();\n            this.changedAccessToken = undefined;\n        }\n    }\n}\nexports.default = SupabaseClient;\n//# sourceMappingURL=SupabaseClient.js.map","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_REALTIME_OPTIONS = exports.DEFAULT_AUTH_OPTIONS = exports.DEFAULT_DB_OPTIONS = exports.DEFAULT_GLOBAL_OPTIONS = exports.DEFAULT_HEADERS = void 0;\nconst version_1 = require(\"./version\");\nlet JS_ENV = '';\n// @ts-ignore\nif (typeof Deno !== 'undefined') {\n    JS_ENV = 'deno';\n}\nelse if (typeof document !== 'undefined') {\n    JS_ENV = 'web';\n}\nelse if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    JS_ENV = 'react-native';\n}\nelse {\n    JS_ENV = 'node';\n}\nexports.DEFAULT_HEADERS = { 'X-Client-Info': `supabase-js-${JS_ENV}/${version_1.version}` };\nexports.DEFAULT_GLOBAL_OPTIONS = {\n    headers: exports.DEFAULT_HEADERS,\n};\nexports.DEFAULT_DB_OPTIONS = {\n    schema: 'public',\n};\nexports.DEFAULT_AUTH_OPTIONS = {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    flowType: 'implicit',\n};\nexports.DEFAULT_REALTIME_OPTIONS = {};\n//# sourceMappingURL=constants.js.map","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = void 0;\nexports.version = '2.57.4';\n//# sourceMappingURL=version.js.map","\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fetchWithAuth = exports.resolveHeadersConstructor = exports.resolveFetch = void 0;\n// @ts-ignore\nconst node_fetch_1 = __importStar(require(\"@supabase/node-fetch\"));\nconst resolveFetch = (customFetch) => {\n    let _fetch;\n    if (customFetch) {\n        _fetch = customFetch;\n    }\n    else if (typeof fetch === 'undefined') {\n        _fetch = node_fetch_1.default;\n    }\n    else {\n        _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n};\nexports.resolveFetch = resolveFetch;\nconst resolveHeadersConstructor = () => {\n    if (typeof Headers === 'undefined') {\n        return node_fetch_1.Headers;\n    }\n    return Headers;\n};\nexports.resolveHeadersConstructor = resolveHeadersConstructor;\nconst fetchWithAuth = (supabaseKey, getAccessToken, customFetch) => {\n    const fetch = (0, exports.resolveFetch)(customFetch);\n    const HeadersConstructor = (0, exports.resolveHeadersConstructor)();\n    return (input, init) => __awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        const accessToken = (_a = (yield getAccessToken())) !== null && _a !== void 0 ? _a : supabaseKey;\n        let headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);\n        if (!headers.has('apikey')) {\n            headers.set('apikey', supabaseKey);\n        }\n        if (!headers.has('Authorization')) {\n            headers.set('Authorization', `Bearer ${accessToken}`);\n        }\n        return fetch(input, Object.assign(Object.assign({}, init), { headers }));\n    });\n};\nexports.fetchWithAuth = fetchWithAuth;\n//# sourceMappingURL=fetch.js.map","\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateSupabaseUrl = exports.applySettingDefaults = exports.isBrowser = exports.ensureTrailingSlash = exports.uuid = void 0;\nfunction uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\nexports.uuid = uuid;\nfunction ensureTrailingSlash(url) {\n    return url.endsWith('/') ? url : url + '/';\n}\nexports.ensureTrailingSlash = ensureTrailingSlash;\nconst isBrowser = () => typeof window !== 'undefined';\nexports.isBrowser = isBrowser;\nfunction applySettingDefaults(options, defaults) {\n    var _a, _b;\n    const { db: dbOptions, auth: authOptions, realtime: realtimeOptions, global: globalOptions, } = options;\n    const { db: DEFAULT_DB_OPTIONS, auth: DEFAULT_AUTH_OPTIONS, realtime: DEFAULT_REALTIME_OPTIONS, global: DEFAULT_GLOBAL_OPTIONS, } = defaults;\n    const result = {\n        db: Object.assign(Object.assign({}, DEFAULT_DB_OPTIONS), dbOptions),\n        auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), authOptions),\n        realtime: Object.assign(Object.assign({}, DEFAULT_REALTIME_OPTIONS), realtimeOptions),\n        storage: {},\n        global: Object.assign(Object.assign(Object.assign({}, DEFAULT_GLOBAL_OPTIONS), globalOptions), { headers: Object.assign(Object.assign({}, ((_a = DEFAULT_GLOBAL_OPTIONS === null || DEFAULT_GLOBAL_OPTIONS === void 0 ? void 0 : DEFAULT_GLOBAL_OPTIONS.headers) !== null && _a !== void 0 ? _a : {})), ((_b = globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.headers) !== null && _b !== void 0 ? _b : {})) }),\n        accessToken: () => __awaiter(this, void 0, void 0, function* () { return ''; }),\n    };\n    if (options.accessToken) {\n        result.accessToken = options.accessToken;\n    }\n    else {\n        // hack around Required<>\n        delete result.accessToken;\n    }\n    return result;\n}\nexports.applySettingDefaults = applySettingDefaults;\n/**\n * Validates a Supabase client URL\n *\n * @param {string} supabaseUrl - The Supabase client URL string.\n * @returns {URL} - The validated base URL.\n * @throws {Error}\n */\nfunction validateSupabaseUrl(supabaseUrl) {\n    const trimmedUrl = supabaseUrl === null || supabaseUrl === void 0 ? void 0 : supabaseUrl.trim();\n    if (!trimmedUrl) {\n        throw new Error('supabaseUrl is required.');\n    }\n    if (!trimmedUrl.match(/^https?:\\/\\//i)) {\n        throw new Error('Invalid supabaseUrl: Must be a valid HTTP or HTTPS URL.');\n    }\n    try {\n        return new URL(ensureTrailingSlash(trimmedUrl));\n    }\n    catch (_a) {\n        throw Error('Invalid supabaseUrl: Provided URL is malformed.');\n    }\n}\nexports.validateSupabaseUrl = validateSupabaseUrl;\n//# sourceMappingURL=helpers.js.map","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SupabaseAuthClient = void 0;\nconst auth_js_1 = require(\"@supabase/auth-js\");\nclass SupabaseAuthClient extends auth_js_1.AuthClient {\n    constructor(options) {\n        super(options);\n    }\n}\nexports.SupabaseAuthClient = SupabaseAuthClient;\n//# sourceMappingURL=SupabaseAuthClient.js.map"]}